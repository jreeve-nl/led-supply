#+TITLE:     230V AC - ~48V DC CC Isolated Buck Converter Design (LED Driver)
#+AUTHOR:    Jeremy Reeve
#+EMAIL:     jreeve.nl@gmail.com
#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+OPTIONS: author:t broken-links:nil c:nil creator:nil
#+OPTIONS: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:t
#+OPTIONS: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+OPTIONS: timestamp:t title:t toc:nil todo:t |:t
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 25.1.1 (Org mode 9.0.5)
#+OPTIONS: html-link-use-abs-url:nil html-postamble:auto
#+OPTIONS: html-preamble:t html-scripts:t html-style:t
#+OPTIONS: html5-fancy:nil tex:t
#+HTML_DOCTYPE: xhtml-strict
#+HTML_CONTAINER: div
#+DESCRIPTION:
#+KEYWORDS:
#+HTML_LINK_HOME:
#+HTML_LINK_UP:
#+HTML_MATHJAX:uuuu
#+HTML_HEAD:
#+HTML_HEAD_EXTRA:
#+SUBTITLE:
#+INFOJS_OPT:
#+CREATOR: <a href="http://www.gnu.org/software/emacs/">Emacs</a> 25.1.1 (<a href="http://orgmode.org">Org</a> mode 9.0.5)
#+LATEX_HEADER:
#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS:
#+LATEX_HEADER:
#+LATEX_HEADER_EXTRA: \usepackage{svg}
#+LATEX_HEADER_EXTRA: \usepackage{amsmath, amssymb}
#+LATEX_HEADER_EXTRA: \usepackage{bm}
#+LATEX_HEADER_EXTRA: \usepackage{gensymb}
#+LATEX_HEADER_EXTRA: \usepackage{tikz}
#+LATEX_HEADER_EXTRA: \usepackage{circuitikz}
#+LATEX_HEADER_EXTRA: \DeclareRobustCommand{\bbone}{\text{\usefont{U}{bbold}{m}{n}1}}
#+LATEX_HEADER_EXTRA: \DeclareMathOperator{\EX}{\mathrm{E}}% expected value
#+LATEX_HEADER_EXTRA: \DeclareMathOperator{\Var}{\mathrm{Var}}% variance value
#+LATEX_HEADER_EXTRA: \DeclareMathOperator{\Cov}{\mathrm{Cov}}% covariance value
#+LATEX_HEADER_EXTRA: \newcommand{\distas}{\sim}%
#+LATEX_HEADER_EXTRA: \tikzset{EFvoltages}
#+DESCRIPTION:
#+KEYWORDS:
#+SUBTITLE:
#+LATEX_COMPILER: pdflatex
#+DATE: \today
#+STARTUP: showall indent
#+STARTUP: hidestars
#+STARTUP: latexpreview
#+BEGIN_EXPORT html
---
layout: page
category : design
tagline: "230V AC - ~48V DC CC Isolated Buck Converter Design (LED Driver)"
tags : [microgreens, led, powerelectronics]
---
{% include JB/setup %}
#+END_EXPORT

#+BEGIN_SRC python :noweb yes :tangle led_supply_design.py :exports none
#!/usr/bin/env python

"""
led_supply_design.py: 

	Copyright (c) 2020,2021 Jeremy Reeve <jreeve.nl@gmail.com>


"""

<<led-supply-design-main-imports>>

<<led-supply-design-imports>>

<<led-supply-design-authorship>>

# constants
<<led-supply-design-constants>>

# globals
<<led-supply-design-globals>>

# exception classes

# interface functions

# classes
<<led-supply-design-defn>>

# internal functions & classes

<<led-supply-design-constants>>

<<led-supply-design-compute-approx-snr-earth-surface>>

<<led-supply-design-main>>

<<led-supply-design-call-main>>
#+END_SRC

#+NAME: led-supply-design-authorship
#+BEGIN_SRC python :exports none
  __author__ = "Jeremy Reeve"
  __copyright__ = "Copyright (C) 2020, 2021 Jeremy Reeve"
  __credits__ = ["Jeremy Reeve"]
  __license__ = "Murky"
  __version__ = "1.0.1"
  __maintainer__ = "Jeremy Reeve"
  __email__ = "jreeve.nl@gmail.com"
  __status__ = "Prototype"
#+END_SRC


#+NAME: led-supply-design-imports
#+BEGIN_SRC python :exports none
  from argparse import ArgumentParser

  import logging
  import os
  import sys

  import matplotlib.pyplot as plt
  import mpl_toolkits.mplot3d.axes3d as axes3d
  import numpy as np
  import scipy.integrate
  import scipy.optimize
#+END_SRC


#+NAME: led-supply-design-main
#+BEGIN_SRC python :exports none

  def main():
      compute_approx_snr_earth_surface()

#+END_SRC



#+NAME: led-supply-design-call-main
#+BEGIN_SRC python :exports none
  if __name__ == '__main__':
      status = main()
      sys.exit(status)
#+END_SRC



#+NAME: led-supply-design-constants
#+BEGIN_SRC python :exports code

  CONST_C = 299792458
  """float: c (ms^1), universal physical constant for speed of light in a vacuum.

  """

  CONST_K = 1.38064852e-23
  """float: k (J K^-1), Boltzmann constant.

  """

  CONST_ROOM_TEMP = 298
  """int: T_25 (K), Room temperature in Kelvin.

  """

  CONST_MU_0 = 1.2566370614e-6
  """float: \mu_0 (H m^{-1}), Permeability of free space 

  """

  CONST_ETA = 0.90
  """float: eta (), Converter efficiency (assumed) 

  """

  CONST_GAMMA = 0.01
  """float: gamma (),  ratio such that |v_ripple(t)| / V << gamma

  """

  DEBUG_LOG = False
  """bool: DEBUG_LOG , switch on verbose logging."""

#+END_SRC



* Estimating nominal values for power supply outputs


#+NAME: led-supply-design-compute-supply-outputs
#+BEGIN_SRC python :results output scalar raw replace

  class LEDFixtureParams(object):

      P_nominal    =   65       #  (W) reference from HLG 65W product
      N            =  120       #  total number of LEDs 
      N_p          =    8       #  number of LEDs in parallel 
      N_s          =  N / N_p   #  implied number of LEDs in series
      MANUFACTURER = "Samsung Semiconductor, Inc."  #
      DESCRIPTION  = "LED LM301H"                   #
      PART_NUMBER  = "SPMWHD32AMH5XAP5SL"           #
      V_F          =    2.75    #  (V)  LED forward voltage drop
      I_test       =   65       #  (mA) LED test current
      I_nominal    =  P_nominal / N / V_F * 1e3
                                #  (mA) LED nominal current derived from HLG 65W product
      I_max        =  200       #  (mA) LED maximum rated current


  class SupplyOutputs(object):

      V_O_max      =   54.0     #  (V)  Maximum output voltage chosen arbitrarily

      def __init__(self, ledFixtureParams):
          self.ledFixtureParams = ledFixtureParams

      @property
      def V_O_min(self):
          """ Minimum output voltage determined from series string of
          LED forward voltage drops.
          """
          return self.ledFixtureParams.N_s * self.ledFixtureParams.V_F

      @property
      def V_O_nominal(self):
          """ Minimum output voltage determined from series string of
          LED forward voltage drops plus some amount to account for
          losses.
          """
          return self.V_O_min + 0.25    # arbitrary!

      @property
      def v_O_ripple_pk(self):
          """ Allowable output ripple voltage.
          """
          return self.V_O_nominal * CONST_GAMMA

      @property
      def I_O_nominal(self):
          """ Output current when LEDs are run at a level thought to be used
          in practice.
          """
          return self.ledFixtureParams.N_p * self.ledFixtureParams.I_nominal

      @property
      def I_O_test(self):
          """ Output current when LEDs are run at a test level used when
          referencing other datasheet parameters.
          """
          return self.ledFixtureParams.N_p * self.ledFixtureParams.I_test

      @property
      def I_O_max(self):
          """ Output current when LEDs are run at their absolute maximum level.
          """
          return self.ledFixtureParams.N_p * self.ledFixtureParams.I_max

      @property
      def P_O_nominal(self):
          """ Output power when LEDs are run at a level thought to be used
          in practice.
          """
          return self.I_O_nominal * self.V_O_min / 1e3

      @property
      def P_O_test(self):
          """ Output power when LEDs are run at a test level used when
          referencing other datasheet parameters.
          """
          return self.I_O_test * self.V_O_min / 1e3

      @property
      def P_O_max(self):
          """ Output power when LEDs are run at their absolute maximum level.
          """
          return self.I_O_max * self.V_O_max / 1e3


  def compute_supply_outputs():

      supplyOutputs = SupplyOutputs(LEDFixtureParams())

      print("V_O_min = {0} V  V_O_nominal = {1} V  V_O_max = {2} V  v_O_ripple_pk = {3} V"
            .format(supplyOutputs.V_O_min, supplyOutputs.V_O_nominal, supplyOutputs.V_O_max,
                    supplyOutputs.v_O_ripple_pk))

      print("I_O_test = {0} mA  I_O_nominal = {1} mA  I_O_max = {2} mA"
            .format(supplyOutputs.I_O_test, supplyOutputs.I_O_nominal, supplyOutputs.I_O_max))

      print("P_O_test = {0} W  P_O_nominal = {1} W  P_O_max = {2} W  "
            .format(supplyOutputs.P_O_test, supplyOutputs.P_O_nominal, supplyOutputs.P_O_max))

      return [supplyOutputs.V_O_min, supplyOutputs.V_O_nominal, supplyOutputs.V_O_max,
              supplyOutputs.I_O_test, supplyOutputs.I_O_nominal, supplyOutputs.I_O_max,
              supplyOutputs.P_O_test, supplyOutputs.P_O_nominal, supplyOutputs.P_O_max]

#+END_SRC


#+NAME: led-supply-design-compute-supply-outputs-main
#+BEGIN_SRC python :noweb yes :tangle compute_supply_outputs.py :exports none :results output scalar raw replace
  <<led-supply-design-imports>>

  <<led-supply-design-constants>>

  <<led-supply-design-compute-supply-outputs>>

  def main():
      compute_supply_outputs()

  <<led-supply-design-call-main>>
#+END_SRC

#+RESULTS: led-supply-design-compute-supply-outputs-main
V_O_min = 41.25 V  V_O_nominal = 44.25 V  V_O_max = 54.0 V  v_O_ripple_pk = 0.4425 V
I_O_test = 520 mA  I_O_nominal = 1575.7575757575758 mA  I_O_max = 1600 mA
P_O_test = 21.45 W  P_O_nominal = 65.0 W  P_O_max = 86.4 W  




* Supply Inputs

Since we now know what the power supply must deliver, we may calculate approximate bounds on what we draw from the line assuming a certain efficiency.


#+NAME: led-supply-design-compute-supply-inputs
#+BEGIN_SRC python :results output scalar raw replace
  
  class SupplyInputs():
  
      V_line_min     = 85       #  (V rms) Minimum line input voltage
      V_line_nominal = 230      #  (V rms) Nominal line input voltage
      V_line_max     = 265      #  (V rms) Maximum line input voltage
  
  
      def __init__(self, supplyOutputs):
          self.supplyOutputs = supplyOutputs
  
      @property
      def P_I_test(self):
          """ Total required input power to run LEDs at the test current 
          referenced in the datasheet.  Accounts for estimated efficiency.
          """
          return self.supplyOutputs.P_O_test / CONST_ETA
  
      @property
      def P_I_nominal(self):
          """ Total required input power to run LEDs at the upper bound of level 
          expected during normal operation.  Accounts for estimated efficiency.
          """
          return self.supplyOutputs.P_O_nominal / CONST_ETA 
  
      @property
      def P_I_max(self):
          """ Total required input power to run LEDs at their absolute maximum 
          rating.  Accounts for estimated efficiency.
          """
          return self.supplyOutputs.P_O_max / CONST_ETA
  
      @property
      def I_I_test(self):
          """ Test current RMS
          """
          return self.supplyOutputs.P_O_test / self.V_line_max
  
      @property
      def I_I_nominal(self):
          """ Nominal current RMS
          """
          return self.supplyOutputs.P_O_nominal / self.V_line_nominal
  
      @property
      def I_I_max(self):
          """ Maximum current RMS
          """
          return self.supplyOutputs.P_O_max / self.V_line_min
  
  
  
  def compute_supply_inputs():
  
      supplyInputs = SupplyInputs(SupplyOutputs(LEDFixtureParams()))
  
      print("P_I_test = {0} W  P_I_nominal = {1} W  P_I_max = {2} W"
            .format(supplyInputs.P_I_test, supplyInputs.P_I_nominal, supplyInputs.P_I_max))
      print("I_I_min = {0} A rms  I_I_nominal = {1} A rms  I_I_max = {2} A rms"
            .format(supplyInputs.I_I_min, supplyInputs.I_I_nominal, supplyInputs.I_I_max))
  
      # Assuming PF=1 !
      print("I_I_min_peak = {0} A  I_I_nominal_peak = {1} A  I_I_max_peak = {2} A"
            .format(supplyInputs.I_I_min * np.sqrt(2),
                    supplyInputs.I_I_nominal * np.sqrt(2),
                    supplyInputs.I_I_max * np.sqrt(2)))
  
  
      return supplyInputs
  
#+END_SRC


#+NAME: led-supply-design-compute-supply-inputs-main
#+BEGIN_SRC python :noweb yes :tangle compute_supply_inputs.py :exports none :results output scalar raw replace
  <<led-supply-design-imports>>

  <<led-supply-design-constants>>

  <<led-supply-design-compute-supply-outputs>>

  <<led-supply-design-compute-supply-inputs>>

  def main():
      compute_supply_inputs()

  <<led-supply-design-call-main>>
#+END_SRC

#+RESULTS: led-supply-design-compute-supply-inputs-main
P_I_test = 23.833333333333332 W  P_I_nominal = 72.22222222222221 W  P_I_max = 96.0 W
I_I_min = 0.060669761825805774 A rms  I_I_nominal = 0.19983452511793734 A rms  I_I_max = 0.6109402589451771 A rms
I_I_min_peak = 0.0858 A  I_I_nominal_peak = 0.28260869565217395 A  I_I_max_peak = 0.8640000000000001 A



*  Simulation of a diode bridge feeding a resistive load


Here we use a resistive load to represent the downstream load experienced by the bridge.  In reality if this were to model a diode bridge rectifier in a typical rectifier to buck DC-DC converter topology, this resistive load would be misrepresentative.  We need more information.

#+NAME: led-supply-design-compute-diode-bridge-params
#+BEGIN_SRC python :results output scalar raw replace

  class DiodeBridgeParams():

      f_line         =  50      #  (Hz)    Nominal line frequency
      V_F            =   0.7    #  (V)     Diode forward voltage drop


      def __init__(self, supplyOutputs, supplyInputs):
          self.supplyOutputs = supplyOutputs
          self.supplyInputs = supplyInputs


      def V_O_max(self):
          # This is actually V_O_nominal !!
          return self.supplyInputs.V_line_nominal * np.sqrt(2.0) - 2.0 * self.V_F


      def V_O_min(self):

          return self.supplyInputs.V_line_min * np.sqrt(2.0) - 2.0 * self.V_F


      def V_O_ripple(self):

          return self.V_O_max() * CONST_GAMMA 


      def R_L(self):

          return self.V_O_max() ** 2 / self.supplyInputs.P_I_max()


      def C(self):

          T = 1 / (2 * self.f_line)
          I = self.V_O_max() / self.R_L()

          return I * T / self.V_O_ripple() * 1e6  #uF



  def compute_diode_bridge_params():

      supplyOutputs = SupplyOutputs(LEDFixtureParams())
      diodeBridgeParams = DiodeBridgeParams(supplyOutputs,
                                            SupplyInputs(supplyOutputs))

      print("V_O_max = {0} V  V_O_ripple = {1} V"
            .format(diodeBridgeParams.V_O_max(), diodeBridgeParams.V_O_ripple()))
      print("R_L = {0} Ohm  C = {1} uF"
            .format(diodeBridgeParams.R_L(), diodeBridgeParams.C()))

      return diodeBridgeParams

#+END_SRC


#+NAME: led-supply-design-compute-diode-bridge-params
#+BEGIN_SRC python :noweb yes :tangle compute_diode_bridge_params.py :exports none :results output scalar raw replace
  <<led-supply-design-imports>>

  <<led-supply-design-constants>>

  <<led-supply-design-compute-supply-outputs>>

  <<led-supply-design-compute-supply-inputs>>

  <<led-supply-design-compute-diode-bridge-params>>

  def main():
      compute_diode_bridge_params()

  <<led-supply-design-call-main>>
#+END_SRC

#+RESULTS: led-supply-design-compute-diode-bridge-params
V_O_max = 323.8691193458119 V  V_O_ripple = 3.238691193458119 V
R_L = 1092.6167340190807 Ohm  C = 915.2340146957118 uF


The output reservoir capacitance is calculated such that we maintain a 1% ripple on the output.  Assuming that the capacitor is sized such that it is charged to the rectifier peak output voltage on each cycle, then $V_{O,\text{max}} = V_{\text{pk}} - 2 V_{f} = 230 \sqrt{2} - 1.4 \approx 324$ V.  Assume $|v_{\text{ripple}}| = \gamma V_{\text{O,max}} = 0.01 \cdot 324 = 3.24$ V.  We see from the previous supply calculations that we would need to deliver $P_{\text{I,max}} = 96.0$ W and we take our resistive load to be $R_L = \frac{V_{O,\text{max}}^2}{P_{\text{I,max}}} = \frac{324^2}{96} = 1093.5 \Omega$ .

Assume that the time constant of the output RC combination, $\tau = RC$ is much larger than the output waveform period, then we may linearise the output voltage as the capacitor discharges into the load.  $Q = CV$ and $Q = It$.  We have full-bridge rectification therefore $T = \frac{1}{2f} = 10$ ms.  Approximate the current drawn by the load as $I = \frac{V_{\text{O,max}}}{R_L} = \frac{324}{1093.5} = 0.296$ A.  Neglecting the time taken to charge the reservoir capacitor, we have:

\begin{align*}
C |v_{\text{ripple}}| &= It                          \\
\Rightarrow  C &= \frac{IT}{|v_{\text{ripple}}|} = \frac{0.296 \cdot 10 \times 10^{-3}}{3.24}   \\
&= 914 \mu \text{F}
\end{align*}



#+CAPTION: Simulation schematic of full bridge rectifier with resistive load and reservoir capacitor
#+LABEL:   fig:sim_sch_diode_bridge
[[../sim/images/diode_bridge_1_sch.png]]



** Quasi-static situation


#+CAPTION: Results for quasi-static situation (neglecting startup)
#+LABEL:   fig:sim_dpl_diode_bridge
[[../sim/images/diode_bridge_1.png]]

Operation is as expected.  This result demonstrates one problem associated with this technique and that is the highly distorted input current waveform with respect to the line input voltage.  Clearly there is much harmonic content other than at the fundamental.  At this power level and making use of passive filtering between the line and diode bridge results could be acceptable (in compliance) but surely we can do better and we have motivation to do so as the intended application must support many of these converters attached to a line and we wish to be good electrical appliance citizens!

** Startup transient

#+CAPTION: Results for startup transient behaviour
#+LABEL:   fig:sim_dpl_diode_bridge_startup
[[../sim/images/diode_bridge_startup.png]]



The results in figure ref:fig:sim_dpl_diode_bridge_startup demonstrate another significant problem with this initial topology, and that is the high inrush current caused by the initial charging of the reservoir capacitor.  For the situation modelled here, we see a peak inrush currrent magnitude of nearly 100A.  This is problematic in many ways, the supply requirements, fusing requirements, stress on the rectifier diodes.  It's possible to accomodate all these issues by overspecification and therefore at increased cost, something we wish to avoid if possible.


* Buck Converter 


Now that we have obtained a DC supply from the line, albeit in not such a satisfactory manner, we attempt to design a DC-DC converter that meets the specification.

Without deriving the results we simply state them, referring to ref:erickson2007fundamentals .

Voltage converstion ratio for a buck converter:

\begin{align}
M(D) &= D
\end{align}

By Volt-second balance applied to the inductor:

\begin{align}
\Delta i_L &= \frac{\left ( V_I - V_O \right ) D T_s}{2L} 
\end{align}


#+NAME: led-supply-design-compute-buck-design-params
#+BEGIN_SRC python :results output scalar raw replace

  class BuckDesignParams():

      f_s             = 132e3    #  (Hz)  Nominal switching frequency
                                 #        (commercial transformers available)
      T_s             = 1/f_s    #  (s)   Nominal switching period
      RATIO_Delta_i_L =   0.1    #  ()    Ratio of inductor/output ripple current
                                 #        to nominal current
      RATIO_Delta_v_C =   0.01   #  ()    Ratio of capacitor/output ripple
                                 #        voltage to nominal output voltage
                                 #        (ripple current contributes to this)

      def __init__(self, diodeBridgeParams, supplyOutputs):
          self.diodeBridgeParams = diodeBridgeParams
          self.supplyOutputs = supplyOutputs


      def D(self):

          return self.supplyOutputs.V_O_nominal()                               \
              / self.diodeBridgeParams.V_O_max()


      def Delta_i_L(self):

          return self.supplyOutputs.I_O_max() * self.RATIO_Delta_i_L


      def Delta_v_C(self):

          return self.supplyOutputs.V_O_nominal() * self.RATIO_Delta_v_C


      def L(self):
          L = (self.diodeBridgeParams.V_O_max()                                  \
                       - self.supplyOutputs.V_O_nominal()) * self.D() * self.T_s \
                       / (2.0 * self.Delta_i_L()) * 1e3 * 1e6
          return L


      def C_min(self):
          C_min = self.supplyOutputs.I_O_max() * self.D() * self.T_s           \
              / (2.0 * self.Delta_v_C()) * 1e-3 * 1e6  #   uF
          return C_min


  def compute_buck_design_params():

      supplyOutputs = SupplyOutputs(LEDFixtureParams())
      diodeBridgeParams = DiodeBridgeParams(supplyOutputs,
                                            SupplyInputs(supplyOutputs))

      buckDesignParams = BuckDesignParams(diodeBridgeParams,
                                          supplyOutputs)

      print("D = {0} ".format(buckDesignParams.D()))
      print("Delta_i_L = {0} mA  L = {1} uH"
            .format(buckDesignParams.Delta_i_L(), buckDesignParams.L()))
      print("Delta_v_C = {0} V  C_min = {1} uF"
            .format(buckDesignParams.Delta_v_C(), buckDesignParams.C_min()))

      return buckDesignParams

#+END_SRC


#+NAME: led-supply-design-compute-buck-design-params
#+BEGIN_SRC python :noweb yes :tangle compute_buck_design_params.py :exports none :results output scalar raw replace
  <<led-supply-design-imports>>

  <<led-supply-design-constants>>

  <<led-supply-design-compute-supply-outputs>>

  <<led-supply-design-compute-supply-inputs>>

  <<led-supply-design-compute-diode-bridge-params>>

  <<led-supply-design-compute-buck-design-params>>

  def main():
      compute_buck_design_params()

  <<led-supply-design-call-main>>
#+END_SRC

#+RESULTS: led-supply-design-compute-buck-design-params
D = 0.12813818150932843 
Delta_i_L = 160.0 mA  L = 856.5877241326438 uH
Delta_v_C = 0.41500000000000004 V  C_min = 1.871313348073434 uF


#+CAPTION: Buck converter schematic
#+LABEL:   fig:sim_sch_buck_converter
[[../sim/images/buck_sim_1_sch.png]]


#+CAPTION: Buck converter simulation results
#+LABEL:   fig:sim_dpl_buck_converter
[[../sim/images/buck_sim_1_dpl.png]]


Combining the diode bridge rectifier and this buck converter and applying a suitable control scheme, we have a solutions that meets the specification.


* SEPIC Single Ended Primary Inductance Converter

We like SEPIC because it's basically a buck-boost converter which is in a configuration such that the semiconductor switch, typically MOSFET, has one terminal connected to ground meaning the gate drive arrangement is simplified (drive level is relative to a fixed low potential).  The other advantage is that the output is non-inverting with respect to the input.

We derived the following results:

By Volt-second balance on $L_1$ , $L_2$:

\begin{align*}
M(D) &= \frac{D}{1 - D}
\end{align*}

By $Q$ balance on $C_1$, $C_2$:

\begin{align*}
I_{L_1} &= \frac{D^2}{\left(1-D\right)^2} \frac{V_g}{R}  \\
&= \frac{D}{\left(1-D\right)} \frac{V_o}{R}              \\
&= \frac{D}{\left(1-D\right)} I_o
\end{align*}

and

\begin{align*}
I_{L_2} &= I_{L_1} \frac{D}{\left(1-D\right)}            \\
&= I_g
\end{align*}

Assuming approximately linear ripple, that the time constants are far greater than the switching periods, we have inductor ripple:

\begin{align*}
\Delta i_{L_1} &= \frac{\left( 1 - D \right) V_O T_s}{L_1}      \\
\Delta i_{L_2} &= \frac{\left( 1 - D \right) V_O T_s}{L_2}
\end{align*}

Applying the Boundary Conduction Mode condition:

\begin{align*}
2 I_{L_1} &\ge \Delta i_{L_1} \\
I_{L_1} &\ge = \frac{\left ( 1 - D \right ) V_O T_s}{2 I_{L_1}} = \frac{\left ( 1 - D \right )^2 R }{D2f_s}   \\
2 I_{L_2} &\ge \Delta i_{L_2} \\
I_{L_2} &\ge \frac{\left ( 1 - D \right ) V_O T_s}{2 I_{L_2}} = \frac{\left ( 1 - D \right ) R }{2f_s} 
\end{align*}



By use of $\Delta Q = C \Delta V$ and integrating the current under the small ripple assumption:

\begin{align*}
C_1 &\ge \frac{I_{\text{O, max}} D_{\text{max}}}{f_s \Delta V_1}   \\
C_2 &\ge \frac{I_{\text{O, max}} D_{\text{max}}}{f_s \Delta V_2} 
\end{align*}


#+NAME: led-supply-design-compute-sepic-design-params
#+BEGIN_SRC python :results output scalar raw replace

  class SepicDesignParams():

      f_s             = 132e3    #  (Hz)  Nominal switching frequency
                                 #        (commercial transformers available)
      T_s             = 1/f_s    #  (s)   Nominal switching period
      RATIO_Delta_i_L =   0.1    #  ()    Ratio of inductor/output ripple current
                                 #        to nominal current
      RATIO_Delta_v_C =   0.01   #  ()    Ratio of capacitor/output ripple
                                 #        voltage to nominal output voltage
                                 #        (ripple current contributes to this)

      def __init__(self, diodeBridgeParams, supplyOutputs):
          self.diodeBridgeParams = diodeBridgeParams
          self.supplyOutputs = supplyOutputs


      def D_min(self):

          return self.supplyOutputs.V_O_nominal()                               \
              / (self.diodeBridgeParams.V_O_max()                               \
                 + self.supplyOutputs.V_O_nominal())


      def D_max(self):

          return self.supplyOutputs.V_O_nominal()                               \
              / (self.diodeBridgeParams.V_O_min()                               \
                 + self.supplyOutputs.V_O_nominal())


      # Ignore this for now.  Select L values based on BCM condition
      def Delta_i_L_1(self):

          return self.supplyOutputs.I_O_max() * self.RATIO_Delta_i_L

      # Ignore this for now.  Select L values based on BCM condition
      def Delta_i_L_2(self):

          return self.supplyOutputs.I_O_max() * self.RATIO_Delta_i_L


      def Delta_v_C_1(self):

          return self.supplyOutputs.V_O_nominal() * self.RATIO_Delta_v_C


      def Delta_v_C_2(self):

          return self.supplyOutputs.V_O_nominal() * self.RATIO_Delta_v_C


      def L_1_min(self):
          L_1_min = (1 - self.D_min()) ** 2 * self.supplyOutputs.V_O_nominal()  \
              / (2.0 * self.D_min() * self.supplyOutputs.I_O_nominal()          \
                 ,* self.f_s) * 1e3 * 1e6
          return L_1_min


      def L_2_min(self):
          L_2_min = (1 - self.D_min()) * self.supplyOutputs.V_O_nominal()       \
              / (2.0 * self.supplyOutputs.I_O_nominal()                         \
                 ,* self.f_s) * 1e3 * 1e6
          return L_2_min


      def C_1_min(self):
          C_1_min = self.supplyOutputs.I_O_nominal() * self.D_max() * self.T_s  \
              / self.Delta_v_C_1() * 1e6 * 1e-3   #  uF
          return C_1_min


      def C_2_min(self):
          C_2_min = self.supplyOutputs.I_O_nominal() * self.D_max() * self.T_s  \
              / self.Delta_v_C_2() * 1e6 * 1e-3   #  uF
          return C_2_min


  def compute_sepic_design_params():

      supplyOutputs = SupplyOutputs(LEDFixtureParams())
      diodeBridgeParams = DiodeBridgeParams(supplyOutputs,
                                            SupplyInputs(supplyOutputs))

      sepicDesignParams = SepicDesignParams(diodeBridgeParams,
                                            supplyOutputs)

      print("D_min = {0}  D_max = {1}".format(sepicDesignParams.D_min(),
                                              sepicDesignParams.D_max()))
      print("L_1_min = {0} uH  L_2_min = {1} uH"
            .format(sepicDesignParams.L_1_min(), sepicDesignParams.L_2_min()))
      print("Delta_v_C_1 = {0} V  C_1_min = {1} uF"
            .format(sepicDesignParams.Delta_v_C_1(), sepicDesignParams.C_1_min()))
      print("Delta_v_C_2 = {0} V  C_2_min = {1} uF"
            .format(sepicDesignParams.Delta_v_C_2(), sepicDesignParams.C_2_min()))

      return sepicDesignParams

#+END_SRC


#+NAME: led-supply-design-compute-sepic-design-params
#+BEGIN_SRC python :noweb yes :tangle compute_sepic_design_params.py :exports none :results output scalar raw replace
  <<led-supply-design-imports>>

  <<led-supply-design-constants>>

  <<led-supply-design-compute-supply-outputs>>

  <<led-supply-design-compute-supply-inputs>>

  <<led-supply-design-compute-diode-bridge-params>>

  <<led-supply-design-compute-sepic-design-params>>

  def main():
      compute_sepic_design_params()

  <<led-supply-design-call-main>>
#+END_SRC

#+RESULTS: led-supply-design-compute-sepic-design-params
D_min = 0.11358376447989131  D_max = 0.22862323673775076
L_1_min = 690.1029941628062 uH  L_2_min = 88.4285427261647 uH
Delta_v_C_1 = 0.41500000000000004 V  C_1_min = 6.576392794518592 uF
Delta_v_C_2 = 0.41500000000000004 V  C_2_min = 6.576392794518592 uF


#+CAPTION: SEPIC converter schematic
#+LABEL:   fig:sim_sch_sepic_converter
[[../sim/images/sepic_sim_1_sch.png]]


#+CAPTION: SEPIC converter simulation results
#+LABEL:   fig:sim_dpl_sepic_converter
[[../sim/images/sepic_sim_1_dpl.png]]



*  Transformer isolation


* Pulse-Width Modulated Rectifier

One method of improving the distortion factor of the peak detector type rectifier circuit and hence the Power Factor is to emulate a Loss Free Resistor by having a Boost Converter vary its duty cycle with a switching frequency far above the line frequency in order for the average current drawn from the line to track the instantaneous line voltage.


** Realisation of a Near-Ideal Rectifier

Post rectification the voltage is given by $v_g(t) = V_M \lvert \sin \left ( \omega t \right ) \rvert$

We require a constant output voltage so we must have a converter ratio

\begin{equation*}
M(d(t)) = \frac{v(t)}{v_g(t)} = \frac{V}{V_M \lvert \sin \left ( \omega t \right ) \rvert}
\end{equation*}

We need the conversion ratio to vary between

\begin{equation}
M_\text{min} = \frac{V}{V_M}
\end{equation}

and $\infty$

Assuming ideality, there is no power loss and hence

\begin{equation*}
i(t) = \frac{v_g(t)i_g(t)}{V} = \frac{v_g^2(t)}{R_e}
\end{equation*}

Substituting our expression for $v_g(t)$ yields

\begin{equation*}
i(t) = \frac{V_M^2 \lvert \sin \left ( \omega t \right ) \rvert^2}{V R_e} = \frac{V_M^2}{2 V R_e} \left ( 1 - \cos \left ( 2 \omega t \right ) \right )
\end{equation*}

which we interpret as a DC component plus some 2nd order harmonic of the input line frequency.





* PWM Boost Converter in CCM for PFC


Time dependent conversion ratio for a boost converter is

\begin{align*}
M(d(t)) = \frac{1}{1 - d\left (t \right)}
\end{align*}

and from above, equating the desired conversion ratio with that of the boost converter conversion ratio we have

\begin{align*}
d(t) = 1 - \frac{v_g(t)}{V}
\end{align*}



** Initial design values

#+NAME: led-supply-design-compute-boost-pfc-params
#+BEGIN_SRC python :results output scalar raw replace
  
  class BoostPFCParams():
  
      f_3dB_I_sense  =   1e3    #  (Hz)  Break frequency for I sense LPF
      R_fb_I_sense   = 470e3    #  (Ohm) I sense feedback R value for LPF
  
      V_F            =   0.7    #  (V)   Diode forward voltage drop
  
      R_I_sense      = 100e-3   # (Ohm)  current shunt
  
      def __init__(self, supplyInputs : SupplyInputs):
  
          self._supplyInputs = supplyInputs
  
          return
  
      @property
      def R_e_nom(self) -> float:
  
          return self._supplyInputs.V_line_nominal \
              / self._supplyInputs.I_I_nominal
  
      @property
      def R_e_min(self) -> float:
  
          return self._supplyInputs.V_line_min \
              / self._supplyInputs.I_I_max
  
      def L(self):
          return None
  
  
  class CurrentSenseResistor():
  
      def __init__(self, R_sense : float, I_max_pk : float):
          """
          :param R_sense: Value of current sense resistor in Ohms.
          :param I_max_pk: Maximum peak current in Amperes
          """
          self._R_sense = R_sense
          self._I_max_pk = I_max_pk
  
      @property
      def R_sense(self) -> float:
          """ 
          """
          return self._R_sense
  
      @property
      def P_max(self) -> float:
          """ Assuming our PFC is working, rectified sinusoidal current.
          """
          return self._I_max_pk ** 2 / 2 * self._R_sense
  
      @property
      def V_max_pk(self) -> float:
          """ 
          """
          return self._I_max_pk * self._R_sense
  
      @property
      def I_max_pk(self) -> float:
          """
          """
          return self._I_max_pk
  
  
  class CurrentSenseAmplifierParams():
  
      V_cc    = 12.0        # (V)  +ve power rail
      V_O_max = V_cc - 0.5  # (V)  maximum positive output swing
      R_1     = 270         # (Ohm) one leg of the fb network
  
      def __init__(self,
                   currentSenseResistor : CurrentSenseResistor,
                   f_3dB : float):
          """
          This is a non-inverting op-amp integrator.
          :param V_in_max_pk: Maximum expected V developed across R_sense.
          :param f_3dB: 3dB or break frequency of 1-pole filter.
          :param R_fb: Value of feedback resistor.
          """
          self._currentSenseResistor = currentSenseResistor
          self._V_in_max_pk = self._currentSenseResistor.V_max_pk
          self._f_3dB = f_3dB
  
      @property
      def G(self) -> float:
          """ Gain to achieve full-scale output with maximum 
          peak current sensed.
          """ 
          return self.V_O_max / self._V_in_max_pk
  
      @property
      def R_f(self) -> float:
          """ Shunt connected fb resistor
          """ 
          return self.R_1 * (self.G - 1)
  
      @property
      def C(self) -> float:
  
          return 1 / (2 * np.pi * self._f_3dB * self.R_f)
  
      @property
      def r_m(self) -> float:
          """ Transresistance of the network.
          """ 
          return self._currentSenseResistor.R_sense * self.G
  
  
  class VoltageSenseChainParams():
  
      V_cc      = 12.0        # (V)  +ve power rail
      V_O_max   = V_cc - 0.5  # (V)  maximum positive output swing
      R_T       = 100e3       # (Ohm) total resistance of divider
  
      def __init__(self,
                   V_in_max_pk : float):
          """
          This is a non-inverting op-amp integrator.
          :param V_in_max_pk: Maximum expected post rectification input voltage.
          """
          self._V_in_max_pk = V_in_max_pk
  
      @property
      def ratio(self) -> float:
          """ Divider ratio to rescale sensed input voltage
          """ 
          return self.V_O_max / self._V_in_max_pk
  
      @property
      def R_2(self) -> float:
          """ 
          """ 
          return self.R_T * self.ratio
  
      @property
      def R_1(self) -> float:
          """ 
          """ 
          return self.R_T - self.R_2
  
  
  def compute_boost_pfc_params():
  
      supplyOutputs = SupplyOutputs(LEDFixtureParams())
      supplyInputs = SupplyInputs(supplyOutputs)
      boostPFCParams = BoostPFCParams(supplyInputs)
      currentSenseResistor = CurrentSenseResistor(
          boostPFCParams.R_I_sense,
          supplyInputs.I_I_max * np.sqrt(2))
      currentSenseAmplifierParams = CurrentSenseAmplifierParams(
          currentSenseResistor,
          boostPFCParams.f_3dB_I_sense)
      voltageSenseChainParams = VoltageSenseChainParams(
          supplyInputs.V_line_max * np.sqrt(2.0) - 2.0 * boostPFCParams.V_F)
  
      print("I_max_pk = {0} A  V_max_pk_I_sense = {1} V  P_R_max_I_sense = {2} W"
            .format(currentSenseResistor.I_max_pk,
                    currentSenseResistor.V_max_pk,
                    currentSenseResistor.P_max))
      print("G = {0} R_1 = {1} Ohm  R_f = {2} kOhm  C_I_sense = {3} nF"
            .format(currentSenseAmplifierParams.G,
                    currentSenseAmplifierParams.R_1,
                    currentSenseAmplifierParams.R_f / 1e3,
                    currentSenseAmplifierParams.C * 1e9))
      print("ratio = {0}  R_1 = {1} kOhm  R_2 = {2} kOhm"
            .format(voltageSenseChainParams.ratio,
                    voltageSenseChainParams.R_1 / 1e3,
                    voltageSenseChainParams.R_2 / 1e3))
  
      R_e_s = currentSenseAmplifierParams.r_m / voltageSenseChainParams.ratio
      print("r_m = {0} VA^-1  A_v = {1} VV^-1  R_e = {2} Ohm "
            " R_e_nom = {3} Ohm  R_e_min = {4} Ohm "
            " m_nom = {5}  m_max = {6}"
            .format(currentSenseAmplifierParams.r_m,
                    voltageSenseChainParams.ratio,
                    R_e_s,
                    boostPFCParams.R_e_nom,
                    boostPFCParams.R_e_min,
                    R_e_s / boostPFCParams.R_e_nom,
                    R_e_s / boostPFCParams.R_e_min))
  
      return supplyInputs
  
#+END_SRC

#+RESULTS: led-supply-design-compute-boost-pfc-params


#+NAME: led-supply-design-compute-boost-pfc-params-main
#+BEGIN_SRC python :noweb yes :tangle compute_boost_pfc_params.py :exports none :results output scalar raw replace
  <<led-supply-design-imports>>
  
  <<led-supply-design-constants>>
  
  <<led-supply-design-compute-supply-outputs>>
  
  <<led-supply-design-compute-supply-inputs>>
  
  <<led-supply-design-compute-boost-pfc-params>>
  
  def main():
      compute_boost_pfc_params()
  
  <<led-supply-design-call-main>>
#+END_SRC

#+RESULTS: led-supply-design-compute-boost-pfc-params-main
14.7894736842
I_max_pk = 1.437506491635711 A  V_max_pk_I_sense = 0.1437506491635711 V  P_R_max_I_sense = 0.10332124567474053 W
G = 79.99963872799191 R_1 = 270 Ohm  R_f = 21.329902456557814 kOhm  C_I_sense = 7.461587947532487 nF
ratio = 0.030800827347480297  R_1 = 96.91991726525198 kOhm  R_2 = 3.08008273474803 kOhm
r_m = 7.999963872799191 VA^-1  A_v = 0.030800827347480297 VV^-1  R_e = 259.7321098731343 Ohm  R_e_nom = 813.8461538461539 Ohm  R_e_min = 83.62268518518518 Ohm  m_nom = 0.31914153387058086  m_max = 3.106000594192222


* Small-signal model of the Boost Converter

** Topology



* Auxilliary supply


#+NAME: led-supply-aux-buck-calc
#+BEGIN_SRC python :results output

print(12/0.760 - 1)
#+END_SRC

#+RESULTS: led-supply-aux-buck-calc
: 14.7894736842

From an E24 resistor calculator, https://jansson.us/resistors.html we have

$R_1 = 15k \Omega$ , $R_2 = 1k + 15 \Omega$

ref:erickson2007fundamentals


ref:umesh2014active demonstrates a technique for passive and a technique for active power factor correction.



bibliographystyle:plain
bibliography:references.bib



